from selenium import webdriver
from selenium.webdriver.common.keys import Keys
import unittest


class NewVisitorTest(unittest.TestCase):

	def setUp(self):
		self.browser = webdriver.Firefox()
		self.browser.implicitly_wait(3)
		
	def tearDown(self):
		self.browser.quit()

	def test_can_start_a_list_and_retrieve_it_later(self):
		#Jack heard about a cool new to-do website and goes to check
		#out its homepage
		self.browser.get('http://localhost:8000')

		#He notices page title and header mention to-do lists
		self.assertIn('To-Do', self.browser.title)
		header_text = self.browser.find_element_by_tag_name('h1').text
		self.assertIn('To-Do', header_text)

		#He is invited to enter a to-do item straight away
		inputbox = self.browser.find_element_by_id('id_new_item')
		self.assertEqual(
				inputbox.get_attribute('placeholder'),
				'Enter a to-do item'
		)
		#He enters "Buy peacock feathers", his hobby is fly fishing 
		#lures
		inputbox.send_keys('Buy peacock feathers')
		
		#When he hits enter, page updates and the page now lists
		#"1: Buy peacock feathers" as an item in a to-do list
		inputbox.send_keys(Keys.ENTER)
		
		table = self.browser.find_element_by_id('id_list_table')
		rows = table.find_elements_by_tag_name('tr')
		self.assertTrue(
			any(row.text == '1: Buy peacock feathers' for row in rows),
			"New to-do item did not appear in table"
		)
		#The text box inviting him to add another item is still there.
		#He enters "Use peacock feathers to make a fly"

		#Page again updates, shows both items on his list

		#Jack wonders if the page will remember his list even if he
		#refreshes the page, notices unique URL generated by the site

		#He refreshes the page, his list is still there

		#The end

if __name__ == '__main__':
	unittest.main(warnings='ignore')
